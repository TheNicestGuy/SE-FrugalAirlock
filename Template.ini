; TNG's Frugal Airlock script configuration data
;
; BEGIN DOCUMENTATION - This entire section can be safely removed when in use.
;
; 1. How to use the config data
;
; You configure TNG's Frugal Airlock script to work with your custom
; constructions by editing the CustomData fields of the individual blocks
; related to your airlocks. For each block, simply paste into the CustomData the
; text below the documentation, beginning with [TNGFrugalAirlock] and including
; everything beneath. Then customize the values to suit your layout. See the
; documentation of the individual config properties for guidance on
; customization, as well as on which blocks do and do not need this
; configuration.
;
; NOTE: Because of this approach, TNG's Frugal Airlock script will never care
; what names you give to your blocks or block groups, nor does it expect you to
; edit block or group names into the script itself. If you want to name
; everything after cartoon characters and change the names every day; your
; airlocks will still function as long as the CustomData remains intact.
;
; 2. Requirements for a functioning airlock
;
; TNG's Frugal Airlock script tries to leave you as much flexibility as possible
; in the physical design of your airlocks and the spaces around them.
; Nevertheless, there are a few absolute requirements for the script to function
; correctly. These are listed below, and further technical details are given in
; the documentation of individual configuration properties.
;
; Except where noted, multiple instances of each of these are allowed. This is
; not only because one script can operate multiple independent airlocks, but
; also to allow for larger-scale airlocks. Any blocks that are given the same
; role in the same airlock will be operated in concert.
;
;    a. "Controller": A single Programmable Block. There must be EXACTLY ONE
;    Programmable Block per construct* running TNG's Frugal Airlock script. Not
;    one per airlock; just one. A single script can operate multiple airlocks
;    independently.
;
;    (Technically, a "construct" is defined as a grid plus all subgrids attached
;    to it by Rotor, Advanced Rotor, or Piston, but NOT by Connector or Landing
;    Gear. Grids merged with Merge Blocks are considered single grids, thus part
;    of the same construct.)
;
;    b. "Airlock": An airtight chamber of (almost) any shape and size. It must
;    separate a "Vacuum" from a "Habitat", and it must be able to seal itself
;    off from both. Note that a "vacuum" is not required to be zero pressure;
;    it's only assumed to have a dangerously low concentration of oxygen.
;    Likewise, a "habitat" need not be 1.0 atmospheres, but it's assumed to have
;    a safe concentration of oxygen. (In game terms, 50% and up.)
;
;    c. "Outer Door": A door that provides an airtight seal between the Vacuum
;    and the Airlock when closed and allows engineers (or vehicles) to pass when
;    open.
;
;    d. "Inner Door": A door that provides an airtight seal between the Habitat
;    and the Airlock when closed and allows engineers (or vehicles) to pass when
;    open.
;
;    e. "Fill Vent": An Air Vent block that faces into the Airlock and is
;    conveyor-connected to an ample supply of oxygen (e.g., main tanks that
;    pressurize the Habitat).
;
;    f. "Drain Vent": An Air Vent that faces into the Airlock and is
;    conveyor-connected ONLY TO THE DRAIN TANK.
;
;    g. "Drain Tank": An Oxygen Tank that is conveyor-connected to the Drain
;    Vent AND NOTHING ELSE. Multiple Drain Vents and Drain Tanks per airlock are
;    allowed, and the duplicates may be interconnected into one drain system per
;    airlock. However, as a whole, each airlock's drain system MUST be fully
;    isolated from any other conveyor network.
;
;    Drain Tanks are a crucial feature, as they are what makes the airlock
;    "frugal". It's important that Drain Tanks start completely empty when an
;    airlock is first operated. It's also a good idea that the number of Drain
;    Tanks provided for an airlock is sufficient to hold considerably more oxygen
;    than the airlock space itself can hold at 100% pressure. You can calculate
;    this roughly with these figures:
;
;    One large ship grid space is 15.625 cubic meters
;    One small ship grid space is 0.125 cubic meters
;    One large ship Oxygen Tank holds 100,000 cubic meters of oxygen (6,400 grid spaces or about 18 x 18 x 18)
;    One small ship Oxygen Tank holds 50,000 cubic meters of oxygen (400,000 grid spaces or about 73 x 73 x 73)
;
; 3. Optional features
;
; None of these is absolutely required, but they can be configured to make your
; airlocks easier to use or more efficient.
;
;    a. Buttons or sensors to trigger airlock operations. If sensors are used,
;    their sensing ranges are one of the few things you must set up manually.
;
;    b. Lights for at-a-glance indications of airlock status. The script will
;    automatically handle color changes.
;
;    c. LCD panels for more detailed readouts of airlock status. The script will
;    intelligently choose how much to display based on the sizes used.
;
;    d. Oxygen tanks for Habitat life support. Of course, most Habitat designs
;    will include these anyway, but it is strongly recommended to also configure
;    them to be recognized by the airlock script. This way an airlock's
;    depressurize cycle can prioritize filling these tanks first, if they happen
;    not to be at full capacity. They would naturally need to be
;    conveyor-connected to airlock Fill Vents (NOT Drain Vents!) for this to
;    work.
;
; 4. What about existing CustomData?
;
; If a block needs TNGFrugalAirlock config, but it also needs other CustomData
; for some other reason, this will fall in one of three situations.
;
;   a. The existing data are in INI format.
;
;   The CustomData used by TNG's Frugal Airlock script is in a simple,
;   standardized format known as "INI". It's easy to recognize; it generally
;   looks like:
;        [SectionName]
;        PropertyName=PropertyValue
;        ...
;        ; This is an informational comment because of the semicolon.
;
;   If the existing CustomData is also INI format, there's a very good chance
;   that all of this config data can live together in harmony. Just add the
;   airlock config data to the top, adding line breaks as needed to ensure that
;   any existing [SectionNames] fall at the start of a line.
;
;   b. The existing data are freeform, but not used by any scripts.
;
;   If the old CustomData is merely informational, but you want to keep it, then
;   paste the [TNGFrugalAirlock] section at the top, and separate it from the
;   old text with a few blank lines. Put three hyphens ("---") at the beginning
;   one of those lines. Everything after the hyphens will be ignored by the
;   airlock script, and also by any other script that parses INI-based
;   CustomData.
;
;   Another alternative, if you insist that the old text appears at the top, is
;   to add a semicolon to the start of every line of old text so the script will
;   treat it all as commentary. Then paste the [TNGFrugalAirlock] section below,
;   ensuring that "[TNGFrugalAirlock]" falls at the start of a line.
;
;   c. The existing data are freeform, and scripts are counting on them.
;
;   This will depend entirely on how the other scripts function. Contact me
;   and/or the other script authors for guidance.
;
; END DOCUMENTATION


[TNGFrugalAirlock]

